
function astroquery -d "Interact with astroquery from fish shell"
    if test (count $argv) -eq 0
        echo "Available astroquery commands:"
        echo "  astroquery list       # List all available astroquery services"
        echo "  astroquery simbad     # Query SIMBAD database"
        echo "  astroquery vizier     # Query VizieR catalogs"
        echo "  astroquery gaia       # Query Gaia database"
        echo "  astroquery skyview    # Get images from SkyView"
        echo "  astroquery ned        # Query NED database"
        echo "  astroquery jplhorizons # Query JPL Horizons for solar system objects"
        return 0
    end

    switch $argv[1]
        case "list"
            python -c "from astroquery import __all__; print('\n'.join(__all__))"
            
        case "*"
            echo "Unknown astroquery command: $argv[1]"
            echo "Run 'astroquery' without arguments to see available commands"
    end
end

function astroquery-simbad -d "Query SIMBAD astronomical database"
    if test (count $argv) -eq 0
        echo "Usage: astroquery-simbad [object_name]"
        echo "Example: astroquery-simbad 'M31'"
        return 1
    end
    
    python -c "
from astroquery.simbad import Simbad
import sys

try:
    result = Simbad.query_object('$argv[1]')
    if result is None:
        print(f'No results found for \"{argv[1]}\"')
    else:
        print(result)
except Exception as e:
    print(f'Error querying SIMBAD: {e}')
"
end

function astroquery-vizier -d "Query VizieR astronomical catalogs"
    if test (count $argv) -lt 2
        echo "Usage: astroquery-vizier [catalog_id] [object_name] (radius_arcmin)"
        echo "Example: astroquery-vizier 'II/246' 'M31' 10"
        return 1
    end
    
    set radius 5  
    if test (count $argv) -ge 3
        set radius $argv[3]
    end
    
    python -c "
from astroquery.vizier import Vizier
import astropy.units as u
import sys

try:
    v = Vizier(columns=['*', '+_r'])
    result = v.query_object('$argv[2]', catalog='$argv[1]', radius=$radius * u.arcmin)
    if not result:
        print(f'No results found for \"{argv[2]}\" in catalog \"{argv[1]}\"')
    else:
        for table_name in result.keys():
            print(f'\\nTable: {table_name}')
            print(result[table_name])
except Exception as e:
    print(f'Error querying VizieR: {e}')
"
end

function astroquery-gaia -d "Query Gaia database"
    if test (count $argv) -lt 1
        echo "Usage: astroquery-gaia [object_name] (radius_arcsec)"
        echo "Example: astroquery-gaia 'Sirius' 30"
        return 1
    end
    
    set radius 10  
    if test (count $argv) -ge 2
        set radius $argv[2]
    end
    
    python -c "
from astroquery.gaia import Gaia
from astroquery.simbad import Simbad
import astropy.units as u
import astropy.coordinates as coord
import sys

try:
    result = Simbad.query_object('$argv[1]')
    if result is None:
        print(f'Object \"{argv[1]}\" not found in SIMBAD')
        sys.exit(1)
    
    ra = result['RA'][0]
    dec = result['DEC'][0]
    
    c = coord.SkyCoord(ra + ' ' + dec, unit=(u.hourangle, u.deg))
    
    r = $radius * u.arcsec
    j = Gaia.cone_search_async(c, r)
    result = j.get_results()
    
    if len(result) == 0:
        print(f'No Gaia results found for \"{argv[1]}\" within {r}')
    else:
        print(f'Found {len(result)} sources in Gaia DR3:')
        cols = ['source_id', 'ra', 'dec', 'parallax', 'pmra', 'pmdec', 'phot_g_mean_mag', 'bp_rp']
        print(result[cols])
except Exception as e:
    print(f'Error querying Gaia: {e}')
"
end

function astroquery-skyview -d "Get images from SkyView"
    if test (count $argv) -lt 1
        echo "Usage: astroquery-skyview [object_name] (survey) (output_file)"
        echo "Example: astroquery-skyview 'M51' 'DSS' './m51_dss.fits'"
        echo "Available surveys: DSS, DSS2, 2MASS, WISE, SDSS, etc."
        return 1
    end
    
    set survey "DSS"  
    if test (count $argv) -ge 2
        set survey $argv[2]
    end
    
    set output_file "$argv[1]_$survey.fits"  
    if test (count $argv) -ge 3
        set output_file $argv[3]
    end
    
    python -c "
from astroquery.skyview import SkyView
from astropy.io import fits
import matplotlib.pyplot as plt
import sys
try:
    object_name = '$argv[1]'
    survey_name = '$survey'
    output_file = '$output_file'
    
    print(f'Fetching {survey_name} image for {object_name}...')
    images = SkyView.get_images(position=object_name, survey=[survey_name])
    
    if not images or len(images) == 0 or images[0] is None:
        print(f'No images found for \"{object_name}\" in survey \"{survey_name}\"')
        sys.exit(1)
    
    fits.writeto(output_file, images[0][0].data, images[0][0].header, overwrite=True)
    print(f'Image saved to {output_file}')
    
    print(f'Image size: {images[0][0].data.shape}')
    print(f'To display this image, you can use DS9 or a Python script with matplotlib')
except Exception as e:
    print(f'Error getting image from SkyView: {e}')
"
end


function astroquery-ned -d "Query NASA/IPAC Extragalactic Database"
    if test (count $argv) -eq 0
        echo "Usage: astroquery-ned [object_name]"
        echo "Example: astroquery-ned 'NGC 1275'"
        return 1
    end
    
    python -c "
from astroquery.ipac.ned import Ned
import sys
try:
    object_name = '$argv[1]'
    print(f'Querying NED for {object_name}...')
    
    result = Ned.query_object(object_name)
    if result is None or len(result) == 0:
        print(f'No results found for \"{object_name}\" in NED')
    else:
        print(result)
        
    print('\\nBasic data:')
    try:
        objdata = Ned.get_object_info(object_name)
        print(objdata)
    except Exception as e:
        print(f'Could not retrieve basic data: {e}')
        
except Exception as e:
    print(f'Error querying NED: {e}')
"
end

# Fixed NED database query function
function astroquery-ned -d "Query NASA/IPAC Extragalactic Database"
    if test (count $argv) -eq 0
        echo "Usage: astroquery-ned [object_name]"
        echo "Example: astroquery-ned 'NGC 1275'"
        return 1
    end
    
    python -c "
from astroquery.ipac.ned import Ned  # Updated import path
import sys

try:
    object_name = '$argv[1]'
    result = Ned.query_object(object_name)
    if result is None or len(result) == 0:
        print(f'No results found for \"{object_name}\" in NED')
    else:
        print(result)
        
    # Get basic parameters
    print('\\nBasic data:')
    try:
        objdata = Ned.get_object_info(object_name)
        print(objdata)
    except Exception as e:
        print(f'Could not retrieve basic data: {e}')
        
except Exception as e:
    print(f'Error querying NED: {e}')
"
end

function astroquery-jplhorizons -d "Query JPL Horizons for solar system objects"
    if test (count $argv) -lt 1
        echo "Usage: astroquery-jplhorizons [object_id] (start_time) (stop_time) (step) (--physical)"
        echo "Example: astroquery-jplhorizons '301' '2023-01-01' '2023-01-10' '1d'"
        echo "Example: astroquery-jplhorizons '301' --physical"
        echo "Object IDs: 1=Mercury, 301=Moon, 399=Earth, 499=Mars, 599=Jupiter, etc."
        echo "            Or use names like 'Mars', 'Ceres', 'C/2020 F3' (comet)"
        echo "Options:"
        echo "  --physical    Retrieve physical parameters instead of ephemeris"
        return 1
    end
    
    # Check if we're requesting physical parameters
    if contains -- "--physical" $argv
        set -e argv[(contains -i -- "--physical" $argv)]
        __astroquery_jplhorizons_physical $argv
        return
    end
    
    set object_id $argv[1]
    set start_time "2023-01-01"  # Default start time
    set stop_time "2023-01-10"   # Default end time
    set step "1d"                # Default step (1 day)
    
    if test (count $argv) -ge 2
        set start_time $argv[2]
    end
    
    if test (count $argv) -ge 3
        set stop_time $argv[3]
    end
    
    if test (count $argv) -ge 4
        set step $argv[4]
    end
    
    python -c "
from astroquery.jplhorizons import Horizons
import sys
from tabulate import tabulate
import numpy as np
import pandas as pd

try:
    object_id = '$object_id'
    start_time = '$start_time'
    stop_time = '$stop_time'
    step = '$step'
    
    print(f'Querying JPL Horizons for object: {object_id}')
    print(f'Time range: {start_time} to {stop_time}, step: {step}')
    
    # Create Horizons object
    obj = Horizons(id=object_id, location='@sun', 
                  epochs={'start': start_time, 'stop': stop_time, 'step': step})
    
    # Get ephemeris
    eph = obj.ephemerides()
    
    if eph is None or len(eph) == 0:
        print(f'No ephemeris data found for \"{object_id}\"')
        sys.exit(1)
    
    # Display basic information
    print(f'\\nFound {len(eph)} positions for {object_id}')
    
    # Convert data to Pandas DataFrame and format output
    df = eph.to_pandas()
    
    # Select important columns
    columns = ['datetime_str', 'solar_presence', 'r', 'delta', 'lighttime', 'RA', 'DEC', 'V']
    columns = [col for col in columns if col in df.columns]
    
    # Format output
    print('\\nEphemeris data:')
    print(tabulate(df[columns].head(10), headers='keys', tablefmt='psql', showindex=False))
    
    if len(df) > 10:
        print(f'... and {len(df) - 10} more rows')
    
    # Get object details
    try:
        obj_data = Horizons(id=object_id, location='@sun').ephemerides(quantities=1)
        print('\\nObject information:')
        for key in ['targetname', 'H', 'G']:
            if key in obj_data.columns:
                print(f'{key}: {obj_data[key][0]}')
    except Exception as e:
        print(f'Could not retrieve object details: {e}')
        
except Exception as e:
    print(f'Error querying JPL Horizons: {e}')
    print(f'Tip: If the object ID is a comet or asteroid designation, make sure to use the correct format.')
    print(f'For comets use e.g. \"C/2020 F3\" and for asteroids use e.g. \"1 Ceres\" or \"(99942) Apophis\"')
"
end

function __astroquery_jplhorizons_physical -d "Query JPL Horizons for physical parameters of solar system objects"
    if test (count $argv) -lt 1
        echo "Usage: astroquery-jplhorizons [object_id] --physical"
        echo "Example: astroquery-jplhorizons 'Jupiter' --physical"
        echo "Object IDs: 1=Mercury, 301=Moon, 399=Earth, 499=Mars, 599=Jupiter, etc."
        return 1
    end
    
    set object_id $argv[1]
    
    python -c "
from astroquery.jplhorizons import Horizons
import sys
from tabulate import tabulate
import re

try:
    object_id = '$object_id'
    
    print(f'Querying JPL Horizons for physical parameters of: {object_id}')
    
    # Create Horizons object with the 'id' parameter
    obj = Horizons(id=object_id, location='@sun', epochs=2459000.5)
    
    # Get ephemeris data with quantities='G' for physical data
    data = obj.ephemerides(quantities='G')
    
    # Extract the target name
    target_name = data['targetname'][0] if 'targetname' in data.columns else object_id
    print(f'\\nPhysical parameters for {target_name}:')
    
    # Display basic information from ephemeris
    basic_params = ['H', 'G', 'M1', 'M2', 'k1', 'k2', 'phase_coeff']
    found_params = False
    
    for param in basic_params:
        if param in data.columns:
            print(f'{param}: {data[param][0]}')
            found_params = True
    
    # Get physical parameters from elements API
    try:
        # Query elements API which contains physical parameters
        elem = obj.elements()
        
        if elem is not None:
            print('\\nOrbital elements:')
            
            # Important orbital elements
            orbital_params = ['targetname', 'e', 'incl', 'a', 'Q', 'P']
            for param in orbital_params:
                if param in elem.columns:
                    print(f'{param}: {elem[param][0]}')
    except Exception as e:
        print(f'Could not retrieve orbital elements: {e}')
    
    # Try to get physical data from the raw response (for larger bodies)
    try:
        # Get raw response for additional physical data
        raw_response = obj.ephemerides_async(quantities='G')
        raw_text = raw_response.text
        
        # Look for physical data section
        if '$$SOE' in raw_text and '$$EOE' in raw_text:
            # Extract the header section
            header = raw_text.split('$$SOE')[0]
            
            # Look for physical parameters
            print('\\nAdditional physical parameters:')
            
            # Define patterns for common physical parameters
            patterns = {
                'Mass': r'Mass.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Radius': r'Radius.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Density': r'Density.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Geometric Albedo': r'Geometric albedo.*?=\\s*([\\d.]+)',
                'GM': r'GM\\s*=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Rotation period': r'rot\\. period.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Equatorial radius': r'Equat.*?radius.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)',
                'Polar radius': r'Polar.*?radius.*?=\\s*([\\d.]+\\s*[\\w\\^\\d.]+)'
            }
            
            found_physical = False
            for param, pattern in patterns.items():
                match = re.search(pattern, header, re.IGNORECASE)
                if match:
                    print(f'{param}: {match.group(1)}')
                    found_physical = True
            
            if not found_physical:
                print('No detailed physical parameters found in JPL Horizons data')
        
    except Exception as e:
        print(f'Could not parse raw response for physical parameters: {e}')
    
    if not found_params:
        print('No physical parameters found in JPL Horizons data')
        print('Some objects may not have physical data available in the JPL database')
    
except Exception as e:
    print(f'Error querying JPL Horizons: {e}')
    print(f'Tip: If the object ID is a comet or asteroid designation, make sure to use the correct format.')
    print(f'For comets use e.g. \"C/2020 F3\" and for asteroids use e.g. \"1 Ceres\" or \"(99942) Apophis\"')
"
end

function astroquery -d "Interact with astroquery from fish shell"
    if test (count $argv) -eq 0
        echo "Available astroquery commands:"
        echo "  astroquery list        # List all available astroquery services"
        echo "  astroquery simbad      # Query SIMBAD database"
        echo "  astroquery vizier      # Query VizieR catalogs"
        echo "  astroquery gaia        # Query Gaia database"
        echo "  astroquery skyview     # Get images from SkyView"
        echo "  astroquery ned         # Query NED database"
        echo "  astroquery jplhorizons # Query JPL Horizons for solar system objects"
        return 0
    end

    switch $argv[1]
        case "list"
            python -c "from astroquery import __all__; print('\n'.join(__all__))"
        case "simbad"
            astroquery-simbad $argv[2..-1]
        case "vizier"
            astroquery-vizier $argv[2..-1]
        case "gaia"
            astroquery-gaia $argv[2..-1]
        case "skyview"
            astroquery-skyview $argv[2..-1]
        case "ned"
            astroquery-ned $argv[2..-1]
        case "jplhorizons"
            astroquery-jplhorizons $argv[2..-1]
        case "*"
            echo "Unknown astroquery command: $argv[1]"
            echo "Run 'astroquery' without arguments to see available commands"
    end
end


complete -c astroquery -f -a "list" -d "List all available astroquery services"
complete -c astroquery -f -a "simbad" -d "Query SIMBAD database"
complete -c astroquery -f -a "vizier" -d "Query VizieR catalogs"
complete -c astroquery -f -a "gaia" -d "Query Gaia database"
complete -c astroquery -f -a "skyview" -d "Get images from SkyView"
complete -c astroquery -f -a "ned" -d "Query NED database" 
complete -c astroquery -f -a "jplhorizons" -d "Query JPL Horizons for solar system objects"

complete -c astroquery -f -n "__fish_seen_subcommand_from simbad" -a "M31" -d "Andromeda Galaxy"
complete -c astroquery -f -n "__fish_seen_subcommand_from simbad" -a "M42" -d "Orion Nebula"
complete -c astroquery -f -n "__fish_seen_subcommand_from simbad" -a "Sirius" -d "Brightest star in night sky"

complete -c astroquery -f -n "__fish_seen_subcommand_from vizier" -a "II/246" -d "2MASS All-Sky Catalog"
complete -c astroquery -f -n "__fish_seen_subcommand_from vizier" -a "I/350" -d "Gaia DR3"
complete -c astroquery -f -n "__fish_seen_subcommand_from vizier" -a "I/239" -d "Hipparcos Catalog"

complete -c astroquery -f -n "__fish_seen_subcommand_from skyview" -a "DSS" -d "Digitized Sky Survey"
complete -c astroquery -f -n "__fish_seen_subcommand_from skyview" -a "SDSS" -d "Sloan Digital Sky Survey"
complete -c astroquery -f -n "__fish_seen_subcommand_from skyview" -a "2MASS" -d "2 Micron All Sky Survey"
complete -c astroquery -f -n "__fish_seen_subcommand_from skyview" -a "WISE" -d "Wide-field Infrared Survey Explorer"


complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "--help" -d "Show help information"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "--physical" -d "Get physical parameters instead of ephemeris"

complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "10" -d "Sun"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "1" -d "Mercury"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "2" -d "Venus"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "301" -d "Moon"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "399" -d "Earth"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "499" -d "Mars"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "599" -d "Jupiter"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "699" -d "Saturn"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "799" -d "Uranus"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "899" -d "Neptune"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "999" -d "Pluto"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Ceres" -d "Dwarf planet"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "C/2020 F3" -d "Comet NEOWISE"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Bennu" -d "Asteroid (101955) Bennu"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Psyche" -d "Asteroid (16) Psyche"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Europa" -d "Jupiter's moon"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Titan" -d "Saturn's largest moon"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Ganymede" -d "Jupiter's largest moon"
complete -c astroquery -f -n "__fish_seen_subcommand_from jplhorizons" -a "Enceladus" -d "Saturn's icy moon"
